apiVersion: v1
kind: ConfigMap
metadata:
  name: ai-agents-config
  namespace: default
data:
  config.py: |
    #!/usr/bin/env python3
    """
    Secure configuration management for Bank of Anthos AI Agents
    """
    
    import os
    from typing import Dict, Any
    
    class Config:
        """Configuration class that securely manages environment variables"""
        
        def __init__(self):
            # Gemini AI API Key - DO NOT HARDCODE IN PRODUCTION
            self.GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', 'demo-key')
            
            # MCP Configuration
            self.MCP_API_KEY = os.getenv('MCP_API_KEY', 'mcp-demo-key-123')
            
            # Service URLs
            self.BALANCEREADER_URL = os.getenv('BALANCEREADER_URL', 'http://balancereader:8080')
            self.TRANSACTIONHISTORY_URL = os.getenv('TRANSACTIONHISTORY_URL', 'http://transactionhistory:8080')
            self.USERSERVICE_URL = os.getenv('USERSERVICE_URL', 'http://userservice:8080')
            self.CONTACTS_URL = os.getenv('CONTACTS_URL', 'http://contacts:8080')
            
            # AI Agent URLs
            self.MCP_SERVER_URL = os.getenv('MCP_SERVER_URL', 'http://boa-mcp:8080')
            self.RISK_AGENT_URL = os.getenv('RISK_AGENT_URL', 'http://risk-agent-real:8081')
            self.TERMS_AGENT_URL = os.getenv('TERMS_AGENT_URL', 'http://terms-agent-real:8082')
            
            # Demo settings
            self.DEMO_MODE = os.getenv('DEMO_MODE', 'true').lower() == 'true'
            self.LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
            
        def is_gemini_enabled(self) -> bool:
            """Check if Gemini AI is properly configured"""
            return self.GEMINI_API_KEY and self.GEMINI_API_KEY != 'demo-key'
        
        def get_service_urls(self) -> Dict[str, str]:
            """Get all service URLs"""
            return {
                'balancereader': self.BALANCEREADER_URL,
                'transactionhistory': self.TRANSACTIONHISTORY_URL,
                'userservice': self.USERSERVICE_URL,
                'contacts': self.CONTACTS_URL
            }
    
    # Global config instance
    config = Config()
    
    # Legacy exports for compatibility
    GEMINI_API_KEY = config.GEMINI_API_KEY
    def is_gemini_enabled():
        return config.is_gemini_enabled()
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: perks-agent-real-code
  namespace: default
data:
  app.py: |
    #!/usr/bin/env python3
    """
    Perks Agent for Bank of Anthos AI Credit Pre-Approval System
    
    This agent specializes in creating highly personalized credit card perks, 
    benefits, and fee structures based on user spending patterns and lifestyle insights.
    """
    
    import os
    import json
    from datetime import datetime
    from flask import Flask, request, jsonify
    from flask_cors import CORS
    import sys
    import logging
    
    # Import config
    from config import GEMINI_API_KEY, is_gemini_enabled
    
    app = Flask(__name__)
    CORS(app)
    logging.basicConfig(level=logging.INFO)
    
    class PerksGenerator:
        def __init__(self):
            self.gemini_enabled = is_gemini_enabled()
            if self.gemini_enabled and GEMINI_API_KEY:
                # Would configure Gemini here in production
                logging.info("✅ Perks Agent: Gemini AI enabled for personalized perks generation")
            else:
                logging.info("⚠️ Perks Agent: Using fallback templates - Gemini disabled")

        def generate_personalized_perks(self, user_data, spending_analysis):
            """Generate highly personalized credit card perks based on spending patterns"""
            
            if not self.gemini_enabled:
                return self._generate_fallback_perks(spending_analysis)
            
            try:
                # For demo, use fallback since we don't want to make real Gemini calls
                return self._generate_fallback_perks(spending_analysis)
                
            except Exception as e:
                logging.error(f"Error generating AI perks: {e}")
                return self._generate_fallback_perks(spending_analysis)
        
        def _generate_fallback_perks(self, analysis):
            """Generate template-based perks when AI is unavailable"""
            tier = analysis.get('tier', 'Silver')
            top_categories = analysis.get('top_categories', [])
            total_spending = analysis.get('total_spending', 0)
            
            # Extract top spending category
            top_category = 'Dining'
            if top_categories:
                top_category = top_categories[0].get('category', 'Dining')
            
            if tier == 'Gold':
                return {
                    "card_name": "Bank of Anthos Gold Rewards",
                    "annual_fee": 95,
                    "foreign_transaction_fee_pct": 2.7,
                    "late_payment_fee": 39,
                    "balance_transfer_fee_pct": 3.0,
                    "cash_advance_fee": 25,
                    "overlimit_fee": 0,
                    "primary_cashback": {
                        "category": top_category,
                        "rate": 5.0,
                        "description": f"5% cash back on {top_category}"
                    },
                    "secondary_cashback": {
                        "category": "Groceries",
                        "rate": 3.0,
                        "description": "3% cash back on groceries"
                    },
                    "base_cashback": 1.0,
                    "signup_bonus": {
                        "amount": 200,
                        "spend_requirement": 2000,
                        "timeframe": 3,
                        "description": "Earn $200 bonus after spending $2,000 in first 3 months"
                    },
                    "personalized_perks": [
                        "Annual $100 dining credit",
                        "Free DashPass for 1 year",
                        "Priority customer service",
                        "Extended warranty on purchases"
                    ],
                    "lifestyle_benefits": [
                        "Travel insurance coverage",
                        "Purchase protection",
                        "Price match guarantee"
                    ],
                    "fee_justification": "Annual fee provides $200+ in value through credits and perks",
                    "profit_strategy": "High interchange from bonus categories + responsible fee structure",
                    "competitive_edge": "Personalized rewards in customer's top spending categories",
                    "ai_generated": False,
                    "timestamp": datetime.now().isoformat()
                }
            else:
                return {
                    "card_name": "Bank of Anthos Silver Rewards",
                    "annual_fee": 0,
                    "foreign_transaction_fee_pct": 2.7,
                    "late_payment_fee": 39,
                    "balance_transfer_fee_pct": 3.0,
                    "cash_advance_fee": 25,
                    "overlimit_fee": 0,
                    "primary_cashback": {
                        "category": top_category,
                        "rate": 3.0,
                        "description": f"3% cash back on {top_category}"
                    },
                    "secondary_cashback": {
                        "category": "Gas",
                        "rate": 2.0,
                        "description": "2% cash back on gas"
                    },
                    "base_cashback": 1.0,
                    "signup_bonus": {
                        "amount": 150,
                        "spend_requirement": 1000,
                        "timeframe": 3,
                        "description": "Earn $150 bonus after spending $1,000 in first 3 months"
                    },
                    "personalized_perks": [
                        "No annual fee",
                        "Mobile alerts and controls",
                        "Fraud protection",
                        "Credit score tracking"
                    ],
                    "lifestyle_benefits": [
                        "Cash back on everyday purchases",
                        "Easy mobile app",
                        "Build credit history"
                    ],
                    "fee_justification": "No annual fee with valuable cash back rewards",
                    "profit_strategy": "Volume-based interchange revenue with low customer acquisition cost",
                    "competitive_edge": "No-fee card with personalized bonus categories",
                    "ai_generated": False,
                    "timestamp": datetime.now().isoformat()
                }

    @app.route('/health', methods=['GET'])
    def health_check():
        return jsonify({
            "status": "healthy",
            "service": "perks-agent",
            "ai_enabled": is_gemini_enabled(),
            "timestamp": datetime.now().isoformat()
        })

    @app.route('/generate-perks', methods=['POST'])
    def generate_perks():
        """Generate personalized credit card perks"""
        try:
            data = request.get_json()
            
            user_data = data.get('user_data', {})
            spending_analysis = data.get('spending_analysis', {})
            
            if not spending_analysis:
                return jsonify({"error": "Spending analysis is required"}), 400
            
            perks_generator = PerksGenerator()
            perks_data = perks_generator.generate_personalized_perks(user_data, spending_analysis)
            
            return jsonify({
                "success": True,
                "perks": perks_data,
                "generated_at": datetime.now().isoformat()
            })
            
        except Exception as e:
            logging.error(f"Error in generate_perks: {e}")
            return jsonify({"error": "Failed to generate perks"}), 500

    if __name__ == '__main__':
        port = int(os.environ.get('PORT', 8085))
        logging.info(f"🎁 Starting Perks Agent on port {port}")
        logging.info(f"✅ Gemini AI enabled: {is_gemini_enabled()}")
        app.run(host='0.0.0.0', port=port, debug=False)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: perks-agent-real
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: perks-agent-real
  template:
    metadata:
      labels:
        app: perks-agent-real
    spec:
      containers:
      - name: perks-agent
        image: python:3.12-slim
        workingDir: /app
        command: ["/bin/bash", "-c", "pip install flask flask-cors requests && python app.py"]
        ports:
        - containerPort: 8085
        env:
        - name: PORT
          value: "8085"
        - name: GEMINI_API_KEY
          value: "demo-key"
        volumeMounts:
        - name: config
          mountPath: /app/config.py
          subPath: config.py
        - name: code
          mountPath: /app/app.py
          subPath: app.py
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
      volumes:
      - name: config
        configMap:
          name: ai-agents-config
      - name: code
        configMap:
          name: perks-agent-real-code
---
apiVersion: v1
kind: Service
metadata:
  name: perks-agent-real
  namespace: default
spec:
  type: ClusterIP
  ports:
  - port: 8085
    targetPort: 8085
  selector:
    app: perks-agent-real
