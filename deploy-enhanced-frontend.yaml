apiVersion: v1
kind: ConfigMap
metadata:
  name: enhanced-frontend-html
  namespace: default
  labels:
    app: enhanced-frontend
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>AI Credit Pre-Approval - Bank of Anthos</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; background: #0a0a0a; min-height: 100vh; color: #ffffff; line-height: 1.5; }
            .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #1a1a1a, #2a2a2a); border-radius: 20px; padding: 40px; text-align: center; margin-bottom: 30px; border: 1px solid #333; box-shadow: 0 10px 30px rgba(0, 214, 50, 0.1); }
            .header h1 { font-size: 2.5rem; font-weight: 700; margin-bottom: 10px; background: linear-gradient(135deg, #00d632, #00ff40); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; }
            .header p { font-size: 1.1rem; color: #a1a1a1; margin-bottom: 10px; }
            .agent-status { display: flex; justify-content: center; gap: 15px; margin-top: 20px; flex-wrap: wrap; }
            .agent-status-item { background: #333; padding: 8px 16px; border-radius: 20px; font-size: 0.85rem; display: flex; align-items: center; gap: 8px; }
            .agent-status-item.healthy { background: #00d632; color: #000; }
            .btn-primary { background: linear-gradient(135deg, #00d632, #00c42e); color: #000; border: none; padding: 16px 40px; border-radius: 30px; font-size: 1.1rem; font-weight: 600; cursor: pointer; margin: 30px auto; display: flex; align-items: center; gap: 10px; transition: all 0.3s ease; box-shadow: 0 5px 20px rgba(0, 214, 50, 0.3); }
            .btn-primary:hover { transform: translateY(-2px); box-shadow: 0 8px 25px rgba(0, 214, 50, 0.4); }
            .results-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin: 30px 0; }
            .agent-card { background: #1a1a1a; border: 1px solid #333; border-radius: 16px; padding: 25px; transition: all 0.3s ease; position: relative; overflow: hidden; }
            .agent-card:hover { border-color: #00d632; transform: translateY(-3px); box-shadow: 0 10px 30px rgba(0, 214, 50, 0.2); }
            .agent-card::before { content: ''; position: absolute; top: 0; left: 0; right: 0; height: 4px; background: linear-gradient(90deg, #00d632, #00ff40); }
            .agent-card h3 { color: #ffffff; font-size: 1.3rem; margin-bottom: 15px; display: flex; align-items: center; gap: 10px; }
            .agent-icon { width: 40px; height: 40px; background: #00d632; border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #000; font-size: 18px; }
            .metric { margin: 12px 0; padding: 12px; background: #2a2a2a; border-radius: 8px; border-left: 4px solid #00d632; }
            .metric-label { color: #a1a1a1; font-size: 0.9rem; margin-bottom: 5px; }
            .metric-value { color: #ffffff; font-size: 1.1rem; font-weight: 600; }
            .risk-factors { display: grid; gap: 10px; margin: 15px 0; }
            .risk-factor { display: flex; justify-content: space-between; align-items: center; padding: 10px 12px; background: #2a2a2a; border-radius: 8px; font-size: 0.9rem; }
            .risk-factor.positive { border-left: 4px solid #4CAF50; }
            .risk-factor.negative { border-left: 4px solid #f44336; }
            .risk-factor.neutral { border-left: 4px solid #ff9800; }
            .rewards-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 12px; margin: 15px 0; }
            .reward-item { background: #2a2a2a; padding: 12px; border-radius: 8px; text-align: center; border: 1px solid #333; }
            .reward-rate { font-size: 1.2rem; font-weight: 700; color: #00d632; }
            .challenger-analysis { grid-column: 1 / -1; background: #1a1a1a; border: 2px solid #ff6b35; border-radius: 16px; padding: 25px; }
            .challenger-analysis h3 { color: #ff6b35; }
            .challenger-analysis .agent-icon { background: #ff6b35; }
            .economics-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 15px 0; }
            .economics-item { background: #2a2a2a; padding: 12px; border-radius: 8px; }
            .economics-item.negative { border-left: 4px solid #f44336; }
            .economics-item.positive { border-left: 4px solid #4CAF50; }
            .arbiter-decision { grid-column: 1 / -1; background: linear-gradient(135deg, #1a1a1a, #2a2a2a); border: 2px solid #00d632; border-radius: 16px; padding: 30px; text-align: center; margin: 20px 0; }
            .decision-badge { display: inline-flex; align-items: center; gap: 10px; padding: 15px 30px; background: linear-gradient(135deg, #00d632, #00c42e); color: #000; border-radius: 25px; font-size: 1.2rem; font-weight: 700; margin-bottom: 20px; }
            .final-terms { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin: 20px 0; }
            .term-card { background: #2a2a2a; padding: 20px; border-radius: 12px; text-align: center; border: 1px solid #333; }
            .term-value { font-size: 1.8rem; font-weight: 700; color: #00d632; margin-bottom: 5px; }
            .term-label { color: #a1a1a1; font-size: 0.9rem; }
            .policy-documents { grid-column: 1 / -1; background: #1a1a1a; border: 2px solid #9c27b0; border-radius: 16px; padding: 25px; margin-top: 20px; }
            .policy-documents h3 { color: #9c27b0; }
            .policy-documents .agent-icon { background: #9c27b0; }
            .document-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px; margin: 20px 0; }
            .document-card { background: #2a2a2a; padding: 20px; border-radius: 12px; border: 1px solid #333; transition: all 0.3s ease; }
            .document-card:hover { border-color: #9c27b0; transform: translateY(-2px); }
            .document-title { color: #ffffff; font-weight: 600; margin-bottom: 10px; display: flex; align-items: center; gap: 8px; }
            .document-preview { color: #a1a1a1; font-size: 0.85rem; line-height: 1.4; margin-bottom: 15px; max-height: 100px; overflow: hidden; }
            .btn-secondary { background: #333; color: #fff; border: 1px solid #555; padding: 8px 16px; border-radius: 20px; font-size: 0.85rem; cursor: pointer; transition: all 0.3s ease; }
            .btn-secondary:hover { background: #555; border-color: #00d632; }
            .loading { text-align: center; padding: 40px; color: #a1a1a1; }
            .spinner { width: 40px; height: 40px; border: 4px solid #333; border-top: 4px solid #00d632; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 20px; }
            @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
            .compliance-badge { display: inline-flex; align-items: center; gap: 8px; padding: 8px 16px; background: #4CAF50; color: #000; border-radius: 20px; font-size: 0.85rem; font-weight: 600; margin: 10px 0; }
            .signature-required { background: #ff9800; color: #000; padding: 15px; border-radius: 10px; text-align: center; font-weight: 600; margin: 20px 0; }
            @media (max-width: 768px) { .results-grid { grid-template-columns: 1fr; } .final-terms { grid-template-columns: 1fr; } .economics-grid { grid-template-columns: 1fr; } }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1><i class="fas fa-robot"></i> AI Credit Application System</h1>
                <p>Complete end-to-end credit analysis with 5 AI agents</p>
                <p>Risk Assessment • Terms Generation • Challenger Analysis • Policy Documents</p>
                
                <div class="agent-status" id="agent-status">
                    <div class="agent-status-item">
                        <i class="fas fa-spinner fa-spin"></i> Loading AI Agents...
                    </div>
                </div>

                <button class="btn-primary" onclick="runCompleteAnalysis()">
                    <i class="fas fa-magic"></i>
                    Run Complete Credit Analysis
                </button>
            </div>

            <div id="loading" class="loading" style="display: none;">
                <div class="spinner"></div>
                <h3>AI Agents Working...</h3>
                <p>Risk analysis → Terms generation → Challenger review → Policy documents</p>
            </div>

            <div id="results" style="display: none;">
                <div class="results-grid">
                    <div class="agent-card" id="risk-agent-card">
                        <h3><div class="agent-icon"><i class="fas fa-shield-alt"></i></div>Risk Agent Analysis</h3>
                        <div id="risk-content">
                            <div class="metric"><div class="metric-label">Risk Level</div><div class="metric-value" id="risk-level">Loading...</div></div>
                            <div class="metric"><div class="metric-label">Risk Score</div><div class="metric-value" id="risk-score">Loading...</div></div>
                            <div class="risk-factors" id="risk-factors"></div>
                        </div>
                    </div>

                    <div class="agent-card" id="terms-agent-card">
                        <h3><div class="agent-icon"><i class="fas fa-file-contract"></i></div>Terms Agent Proposal</h3>
                        <div id="terms-content"><div class="final-terms" id="original-terms"></div></div>
                    </div>

                    <div class="agent-card" id="perks-agent-card">
                        <h3><div class="agent-icon"><i class="fas fa-gift"></i></div>Perks Agent Recommendations</h3>
                        <div id="perks-content"><div class="rewards-grid" id="rewards-grid"></div></div>
                    </div>

                    <div class="agent-card" id="spending-card">
                        <h3><div class="agent-icon"><i class="fas fa-chart-pie"></i></div>Spending Analysis</h3>
                        <div id="spending-content"></div>
                    </div>

                    <div class="challenger-analysis" id="challenger-card">
                        <h3><div class="agent-icon"><i class="fas fa-balance-scale"></i></div>Challenger Agent Analysis</h3>
                        <div id="challenger-content"><div class="economics-grid" id="economics-grid"></div></div>
                    </div>

                    <div class="arbiter-decision" id="arbiter-card">
                        <h2><i class="fas fa-gavel"></i> Final Decision</h2>
                        <div class="decision-badge" id="decision-badge">
                            <i class="fas fa-spinner fa-spin"></i> Processing...
                        </div>
                        <div id="decision-details"></div>
                        <div class="final-terms" id="final-terms"></div>
                    </div>

                    <div class="policy-documents" id="policy-card">
                        <h3><div class="agent-icon"><i class="fas fa-file-alt"></i></div>Policy Agent - Legal Documents</h3>
                        <div class="compliance-badge">
                            <i class="fas fa-check-circle"></i>
                            <span id="compliance-score">100% Compliant</span>
                        </div>
                        <div class="signature-required">
                            <i class="fas fa-signature"></i> Electronic signature required for all documents
                        </div>
                        <div class="document-grid" id="document-grid"></div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            const API_BASE = 'http://34.123.3.178';
            let fullData = null;

            async function runCompleteAnalysis() {
                document.getElementById('loading').style.display = 'block';
                document.getElementById('results').style.display = 'none';
                
                try {
                    const response = await fetch(API_BASE + '/api/real-preapproval?username=testuser&_t=' + Date.now());
                    fullData = await response.json();
                    
                    console.log('Complete analysis data:', fullData);
                    
                    updateAgentStatus(fullData.ai_insights?.ai_agents_status || {});
                    updateRiskAgent(fullData.ai_insights?.risk_assessment || {});
                    updateTermsAgent(fullData.ai_insights?.terms || {});
                    updatePerksAgent(fullData.ai_insights?.perks || {});
                    updateSpendingAnalysis(fullData.spending_categories || {});
                    updateChallengerAgent(fullData.ai_insights?.challenger_analysis || {});
                    updateArbiterDecision(fullData.ai_insights?.final_decision || {});
                    updatePolicyDocuments(fullData.ai_insights?.policy_documents || {});
                    
                } catch (error) {
                    console.error('Error running analysis:', error);
                    alert('Error connecting to AI agents. Please try again.');
                }
                
                document.getElementById('loading').style.display = 'none';
                document.getElementById('results').style.display = 'block';
            }

            function updateAgentStatus(agentStatus) {
                const statusContainer = document.getElementById('agent-status');
                statusContainer.innerHTML = '';
                
                const agents = { 'risk': 'Risk Agent', 'terms': 'Terms Agent', 'perks': 'Perks Agent', 'challenger': 'Challenger Agent', 'policy': 'Policy Agent' };
                
                Object.entries(agents).forEach(([key, name]) => {
                    const status = agentStatus[key] || 'unknown';
                    const statusItem = document.createElement('div');
                    statusItem.className = 'agent-status-item ' + status;
                    statusItem.innerHTML = '<i class="fas ' + (status === 'healthy' ? 'fa-check-circle' : 'fa-times-circle') + '"></i>' + name + ': ' + status;
                    statusContainer.appendChild(statusItem);
                });
            }

            function updateRiskAgent(riskData) {
                document.getElementById('risk-level').textContent = riskData.risk_level || 'Unknown';
                document.getElementById('risk-score').textContent = riskData.risk_score || 'N/A';
                
                const riskFactorsContainer = document.getElementById('risk-factors');
                riskFactorsContainer.innerHTML = '';
                
                if (riskData.risk_factors) {
                    riskData.risk_factors.forEach(factor => {
                        const factorDiv = document.createElement('div');
                        const impactClass = factor.impact === 'Positive' ? 'positive' : factor.impact === 'High' ? 'negative' : 'neutral';
                        factorDiv.className = 'risk-factor ' + impactClass;
                        factorDiv.innerHTML = '<div><strong>' + factor.factor + '</strong><br><small>' + factor.description + '</small></div><div style="font-weight: 600;">' + (factor.weight > 0 ? '+' : '') + factor.weight + '</div>';
                        riskFactorsContainer.appendChild(factorDiv);
                    });
                }
            }

            function updateTermsAgent(termsData) {
                const termsContainer = document.getElementById('original-terms');
                termsContainer.innerHTML = '';
                
                if (termsData.terms) {
                    const terms = termsData.terms;
                    const termCards = [
                        { label: 'APR', value: terms.apr_rate + '%' },
                        { label: 'Credit Limit', value: '$' + (terms.credit_limit ? terms.credit_limit.toLocaleString() : 'N/A') },
                        { label: 'Annual Fee', value: '$' + terms.annual_fee },
                        { label: 'Grace Period', value: terms.grace_period_days + ' days' }
                    ];
                    
                    termCards.forEach(term => {
                        const termCard = document.createElement('div');
                        termCard.className = 'term-card';
                        termCard.innerHTML = '<div class="term-value">' + term.value + '</div><div class="term-label">' + term.label + '</div>';
                        termsContainer.appendChild(termCard);
                    });
                }
            }

            function updatePerksAgent(perksData) {
                const rewardsContainer = document.getElementById('rewards-grid');
                rewardsContainer.innerHTML = '';
                
                if (perksData.perks) {
                    const perks = perksData.perks;
                    
                    if (perks.base_cashback) {
                        const rewardItem = document.createElement('div');
                        rewardItem.className = 'reward-item';
                        rewardItem.innerHTML = '<div class="reward-rate">' + perks.base_cashback + '%</div><div>Base Cashback</div>';
                        rewardsContainer.appendChild(rewardItem);
                    }
                    
                    if (perks.primary_cashback) {
                        const rewardItem = document.createElement('div');
                        rewardItem.className = 'reward-item';
                        rewardItem.innerHTML = '<div class="reward-rate">' + perks.primary_cashback.rate + '%</div><div>' + perks.primary_cashback.category + '</div>';
                        rewardsContainer.appendChild(rewardItem);
                    }
                    
                    if (perks.signup_bonus) {
                        const rewardItem = document.createElement('div');
                        rewardItem.className = 'reward-item';
                        rewardItem.innerHTML = '<div class="reward-rate">$' + perks.signup_bonus.amount + '</div><div>Signup Bonus</div>';
                        rewardsContainer.appendChild(rewardItem);
                    }
                }
            }

            function updateSpendingAnalysis(spendingData) {
                const spendingContainer = document.getElementById('spending-content');
                spendingContainer.innerHTML = '';
                
                const sortedCategories = Object.entries(spendingData).filter(([_, data]) => data.total > 0).sort(([,a], [,b]) => b.total - a.total).slice(0, 5);
                
                sortedCategories.forEach(([category, data]) => {
                    const categoryDiv = document.createElement('div');
                    categoryDiv.className = 'metric';
                    categoryDiv.innerHTML = '<div class="metric-label">' + category + '</div><div class="metric-value">$' + data.total.toFixed(0) + ' (' + data.count + ' transactions)</div>';
                    spendingContainer.appendChild(categoryDiv);
                });
            }

            function updateChallengerAgent(challengerData) {
                const challengerContainer = document.getElementById('challenger-content');
                challengerContainer.innerHTML = '';
                
                if (challengerData.base_economics) {
                    const economics = challengerData.base_economics;
                    
                    const decisionDiv = document.createElement('div');
                    decisionDiv.style.marginBottom = '20px';
                    decisionDiv.innerHTML = '<div class="metric"><div class="metric-label">Challenger Decision</div><div class="metric-value">' + (challengerData.decision?.action || 'Unknown') + '</div></div><div style="color: #a1a1a1; margin-top: 10px;">' + (challengerData.decision?.reason || 'No reason provided') + '</div>';
                    challengerContainer.appendChild(decisionDiv);
                    
                    const economicsGrid = document.createElement('div');
                    economicsGrid.className = 'economics-grid';
                    
                    const economicsItems = [
                        { label: 'Monthly Revenue', value: '$' + (economics.revenues?.total?.toFixed(2) || '0'), type: 'positive' },
                        { label: 'Monthly Costs', value: '$' + (economics.costs?.total?.toFixed(2) || '0'), type: 'negative' },
                        { label: 'Monthly Profit', value: '$' + (economics.profit_monthly?.toFixed(2) || '0'), type: economics.profit_monthly > 0 ? 'positive' : 'negative' },
                        { label: 'ROE', value: ((economics.roe * 100).toFixed(1) || '0') + '%', type: economics.roe > 0 ? 'positive' : 'negative' }
                    ];
                    
                    economicsItems.forEach(item => {
                        const itemDiv = document.createElement('div');
                        itemDiv.className = 'economics-item ' + item.type;
                        itemDiv.innerHTML = '<div class="metric-label">' + item.label + '</div><div class="metric-value">' + item.value + '</div>';
                        economicsGrid.appendChild(itemDiv);
                    });
                    
                    challengerContainer.appendChild(economicsGrid);
                }
            }

            function updateArbiterDecision(decisionData) {
                const decisionBadge = document.getElementById('decision-badge');
                const decisionDetails = document.getElementById('decision-details');
                const finalTermsContainer = document.getElementById('final-terms');
                
                if (decisionData.arbiter_decision) {
                    const decision = decisionData.arbiter_decision;
                    const isApproved = decision.includes('approve');
                    decisionBadge.innerHTML = '<i class="fas ' + (isApproved ? 'fa-check-circle' : 'fa-times-circle') + '"></i>' + decision.replace(/_/g, ' ').toUpperCase();
                    decisionBadge.style.background = isApproved ? 'linear-gradient(135deg, #00d632, #00c42e)' : 'linear-gradient(135deg, #f44336, #d32f2f)';
                }
                
                if (decisionData.reason) {
                    decisionDetails.innerHTML = '<div style="background: #2a2a2a; padding: 20px; border-radius: 12px; margin: 20px 0;"><h4 style="color: #00d632; margin-bottom: 10px;">Decision Reasoning</h4><p style="color: #a1a1a1;">' + decisionData.reason + '</p></div>';
                }
                
                if (decisionData.final_terms) {
                    finalTermsContainer.innerHTML = '';
                    const terms = decisionData.final_terms;
                    
                    const termCards = [
                        { label: 'Final APR', value: terms.apr_rate + '%' },
                        { label: 'Credit Limit', value: '$' + (terms.credit_limit ? terms.credit_limit.toLocaleString() : 'N/A') },
                        { label: 'Annual Fee', value: '$' + terms.annual_fee },
                        { label: 'Monthly Profit', value: '$' + (decisionData.counter_profit_monthly?.toFixed(2) || 'N/A') },
                        { label: 'Final ROE', value: ((decisionData.counter_roe * 100)?.toFixed(1) || 'N/A') + '%' }
                    ];
                    
                    termCards.forEach(term => {
                        const termCard = document.createElement('div');
                        termCard.className = 'term-card';
                        termCard.innerHTML = '<div class="term-value">' + term.value + '</div><div class="term-label">' + term.label + '</div>';
                        finalTermsContainer.appendChild(termCard);
                    });
                }
            }

            function updatePolicyDocuments(policyData) {
                const complianceScore = document.getElementById('compliance-score');
                const documentGrid = document.getElementById('document-grid');
                
                if (policyData.compliance_check) {
                    complianceScore.textContent = policyData.compliance_check.compliance_score + '% Compliant';
                }
                
                if (policyData.documents) {
                    documentGrid.innerHTML = '';
                    
                    const documentIcons = {
                        'credit_card_agreement': 'fa-file-contract',
                        'terms_and_conditions': 'fa-file-alt',
                        'privacy_policy': 'fa-shield-alt',
                        'fee_schedule': 'fa-file-invoice-dollar',
                        'application_summary': 'fa-file-signature',
                        'regulatory_disclosures': 'fa-balance-scale'
                    };
                    
                    Object.entries(policyData.documents).forEach(([docType, docData]) => {
                        const docCard = document.createElement('div');
                        docCard.className = 'document-card';
                        
                        const icon = documentIcons[docType] || 'fa-file';
                        const title = docData.document_type || docType.replace(/_/g, ' ').toUpperCase();
                        const preview = docData.content ? docData.content.substring(0, 150).replace(/\\n/g, ' ') + '...' : 'Document content available';
                        
                        docCard.innerHTML = '<div class="document-title"><i class="fas ' + icon + '"></i>' + title + '</div><div class="document-preview">' + preview + '</div><button class="btn-secondary" onclick="viewDocument(\'' + docType + '\')"><i class="fas fa-eye"></i> View Document</button>';
                        
                        documentGrid.appendChild(docCard);
                    });
                }
            }

            function viewDocument(docType) {
                if (!fullData?.ai_insights?.policy_documents?.documents?.[docType]) {
                    alert('Document not available');
                    return;
                }
                
                const doc = fullData.ai_insights.policy_documents.documents[docType];
                const content = doc.content || JSON.stringify(doc, null, 2);
                
                const modal = document.createElement('div');
                modal.style.cssText = 'position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.9); z-index: 1000; display: flex; align-items: center; justify-content: center; padding: 20px;';
                
                modal.innerHTML = '<div style="background: #1a1a1a; border-radius: 16px; padding: 30px; max-width: 800px; max-height: 80vh; overflow-y: auto; border: 1px solid #333;"><div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;"><h3 style="color: #fff;">' + (doc.document_type || docType) + '</h3><button onclick="this.closest(\'div\').parentElement.remove()" style="background: none; border: none; color: #fff; font-size: 24px; cursor: pointer;">&times;</button></div><div style="color: #a1a1a1; line-height: 1.6; white-space: pre-wrap;">' + content.replace(/\\n/g, '\n') + '</div></div>';
                
                document.body.appendChild(modal);
            }

            window.addEventListener('load', () => { runCompleteAnalysis(); });
        </script>
    </body>
    </html>

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enhanced-frontend
  namespace: default
  labels:
    app: enhanced-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enhanced-frontend
  template:
    metadata:
      labels:
        app: enhanced-frontend
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html-content
          mountPath: /usr/share/nginx/html
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: html-content
        configMap:
          name: enhanced-frontend-html

---
apiVersion: v1
kind: Service
metadata:
  name: enhanced-frontend
  namespace: default
  labels:
    app: enhanced-frontend
spec:
  selector:
    app: enhanced-frontend
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  type: LoadBalancer
